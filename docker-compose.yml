version: '3.8'

services:
  backend:
    image: node:14  # Replace with your preferred Node.js version
    container_name: zephyrnet_backend
    working_dir: /app
    volumes:
      - ./backend:/app  # Maps local backend directory to container for live development
      - /app/node_modules  # Ensures node_modules persists in the container
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_HOST=db  # Database host
      - DB_USER=${DB_USER}  # Replace with environment variable or secret
      - DB_PASSWORD=${DB_PASSWORD}  # Replace with environment variable or secret
      - DB_NAME=zephyrnet_chat
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET}  # Replace with environment variable or secret
    ports:
      - "5000:5000"  # Exposes backend on port 5000
    depends_on:
      - db  # Wait for database service to be ready
      - redis  # Wait for Redis service to be ready
    command: "npm start"  # Update based on your backend start script, e.g., npm start or node server.js

  db:
    image: postgres:13  # PostgreSQL version
    container_name: zephyrnet_db
    environment:
      POSTGRES_DB: zephyrnet_chat
      POSTGRES_USER=${DB_USER}  # Replace with environment variable or secret
      POSTGRES_PASSWORD=${DB_PASSWORD}  # Replace with environment variable or secret
    ports:
      - "5432:5432"  # Exposes PostgreSQL on port 5432
    volumes:
      - pgdata:/var/lib/postgresql/data  # Named volume for PostgreSQL data persistence

  redis:
    image: redis:6
    container_name: zephyrnet_redis
    ports:
      - "6379:6379"  # Exposes Redis on port 6379

  nginx:
    image: nginx:latest
    container_name: zephyrnet_nginx
    ports:
      - "80:80"  # Exposes Nginx on port 80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf  # Mount custom Nginx configuration
    depends_on:
      - backend  # Nginx will wait for backend to be ready
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80

volumes:
  pgdata:  # Volume for PostgreSQL data persistence

